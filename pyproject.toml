[project]
name = "lightning-hydra-template"
version = "0.1.0"
description = "PyTorch Lightning + Hydra. A very user-friendly template for ML experimentation."
readme = "README.md"
repository = "https://github.com/nathanpainchaud/lighting-hydra-template"
requires-python = ">=3.12,<4"
dependencies = [
    "hydra-colorlog>=1.2.0,<2",
    "hydra-core>=1.3.2,<2",
    "hydra-optuna-sweeper>=1.2.0,<2",
    "lightning>=2.5.0.post0,<2.6",
    "rich>=13.9.4,<14",
    "rootutils>=1.0.7,<2",
    "torchmetrics>=1.7,<1.8",
]
[project.optional-dependencies]
wandb = [
    "wandb>=0.19.3,<0.20",
]
# torch libraries are not included in the main dependencies because they can be platform-specific
# rather, we leave them as optional dependencies (even though they are required for the code to run)
# and leave it up to the user to indicate which version they want to install
# This solution is inspired by one of the recommended ways to install pytorch listed in uv's documentation:
# https://docs.astral.sh/uv/guides/integration/pytorch/#configuring-accelerators-with-optional-dependencies
# Each extra corresponds to a different platform, so it is up to project maintainers to decide which platforms
# they want to list here, i.e. support
cpu = [
  "torch>=2.6,<2.7",
  "torchvision>=0.21,<0.22",
]
cu118 = [
  "torch>=2.6,<2.7",
  "torchvision>=0.21,<0.22",
]
cu124 = [
  "torch>=2.6,<2.7",
  "torchvision>=0.21,<0.22",
]
cu126 = [
  "torch>=2.6,<2.7",
  "torchvision>=0.21,<0.22",
]

[dependency-groups]
dev = [
    "pre-commit>=4.0.1,<5",
    {include-group = "lint"},
    {include-group = "test"},
]
lint = [
    "docformatter>=1.7.5,<2",
    "ruff>=0.11,<0.12",
]
test = [
    "pytest>=8.3.4,<9",
    "pytest-cov>=6.0.0,<7",
    "sh>=2.2.1,<3",
]

[project.scripts]
template-train = "lightning_hydra_template.train:main"
template-eval = "lightning_hydra_template.eval:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
required-version = ">=0.6.3,<0.7"
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
conflicts = [
  [
    { extra = "cpu" },
    { extra = "cu118" },
    { extra = "cu124" },
    { extra = "cu126" },
  ],
]

[tool.uv.sources]
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
torch = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu118", extra = "cu118" },
  { index = "pytorch-cu124", extra = "cu124" },
  { index = "pytorch-cu126", extra = "cu126" },
]
torchvision = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu118", extra = "cu118" },
  { index = "pytorch-cu124", extra = "cu124" },
  { index = "pytorch-cu126", extra = "cu126" },
]

[[tool.uv.index]]
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "A",    # see: https://pypi.org/project/flake8-builtins
    "ANN",  # see: https://pypi.org/project/flake8-annotations
    "B",    # see: https://pypi.org/project/flake8-bugbear
    "C4",   # see: https://pypi.org/project/flake8-comprehensions
    "D",    # see: https://pypi.org/project/pydocstyle
    "E",    # see: https://pypi.org/project/pycodestyle
    "EXE",  # see: https://pypi.org/project/flake8-executable
    "F",    # see: https://pypi.org/project/pyflakes
    "I",    # see: https://pypi.org/project/isort/
    "ISC",  # see: https://pypi.org/project/flake8-implicit-str-concat
    "N",    # see: https://pypi.org/project/pep8-naming
    "PERF", # see: https://pypi.org/project/perflint/
    "PIE",  # see: https://pypi.org/project/flake8-pie
    "PLC",  # see: https://pypi.org/project/pylint/
    "PLE",  # all Pylint errors except Refactor (R)
    "PLW",
    "PT",   # see: https://pypi.org/project/flake8-pytest-style
    "Q",    # see: https://pypi.org/project/flake8-quotes
    "RET",  # see: https://pypi.org/project/flake8-return
    "RUF",  # Ruff-specific rules
    "S",    # see: https://pypi.org/project/flake8-bandit
    "SIM",  # see: https://pypi.org/project/flake8-simplify
    "T10",  # see: https://pypi.org/project/flake8-debugger
    "TID",  # see: https://pypi.org/project/flake8-tidy-imports/
    "UP",   # see: https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "W",    # see: https://pypi.org/project/pycodestyle
]
ignore = [
    # Do not require type hints for *args and **kwargs
    "ANN002",
    "ANN003",
    # Allow use of Any type
    "ANN401",
    # Do not require docstrings in __init__ and modules
    "D100",
    "D104",
    # Allow use of assert
    "S101",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.docformatter]
recursive = true
wrap-summaries=120
wrap-descriptions=120
