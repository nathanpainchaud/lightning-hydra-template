[project]
name = "lightning-hydra-template"
version = "0.1.0"
description = "PyTorch Lightning + Hydra. A very user-friendly template for ML experimentation."
readme = "README.md"
repository = "https://github.com/nathanpainchaud/lighting-hydra-template"
requires-python = ">=3.12,<4"
dependencies = [
    "hydra-colorlog>=1.2.0,<2",
    "hydra-core>=1.3.2,<2",
    "hydra-optuna-sweeper>=1.2.0,<2",
    "lightning>=2.4.0,<3",
    "rich>=13.9.4,<14",
    "rootutils>=1.0.7,<2",
    "torchmetrics>=1.6.0,<2",
]
[project.optional-dependencies]
wandb = [
    "wandb>=0.19.1,<0.20",
]
# torch libraries are not included in the main dependencies because they can be platform-specific
# rather, we leave them as optional dependencies (even though they are required for the code to run)
# and leave it up to the user to indicate which version they want to install
# This solution is inspired by one of the recommended ways to install pytorch listed in uv's documentation:
# https://docs.astral.sh/uv/guides/integration/pytorch/#configuring-accelerators-with-optional-dependencies
# Each extra corresponds to a different platform, so it is up to project maintainers to decide which platforms
# they want to list here, i.e. support
cpu = [
  "torch>=2.5.1,<3",
  "torchvision>=0.20.1,<1",
]
cu118 = [
  "torch>=2.5.1,<3",
  "torchvision>=0.20.1,<1",
]
cu121 = [
  "torch>=2.5.1,<3",
  "torchvision>=0.20.1,<1",
]
cu124 = [
  "torch>=2.5.1,<3",
  "torchvision>=0.20.1,<1",
]

[dependency-groups]
dev = [
    "pre-commit>=4.0.1,<5",
    {include-group = "lint"},
    {include-group = "test"},
]
lint = [
    "docformatter>=1.7.5,<2",
    "ruff>=0.8.4,<0.9",
]
test = [
    "pytest>=8.3.4,<9",
    "pytest-cov>=6.0.0,<7",
    "sh>=2.1.0,<3",
]

[project.scripts]
template-train = "lightning_hydra_template.train:main"
template-eval = "lightning_hydra_template.eval:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
conflicts = [
  [
    { extra = "cpu" },
    { extra = "cu118" },
    { extra = "cu121" },
    { extra = "cu124" },
  ],
]

[tool.uv.sources]
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
torch = [
  { index = "pytorch-cpu", extra = "cpu", marker = "sys_platform != 'Darwin'" },
  { index = "pytorch-cu118", extra = "cu118" },
  { index = "pytorch-cu121", extra = "cu121" },
  { index = "pytorch-cu124", extra = "cu124" },
]
torchvision = [
  { index = "pytorch-cpu", extra = "cpu", marker = "sys_platform != 'Darwin'" },
  { index = "pytorch-cu118", extra = "cu118" },
  { index = "pytorch-cu121", extra = "cu121" },
  { index = "pytorch-cu124", extra = "cu124" },
]

[[tool.uv.index]]
# Refer to the note above about installing pytorch using optional dependencies,
# especially the link to uv's documentation, to understand this configuration
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # Pylint (except Refactor (R))
    "PLC",
    "PLE",
    "PLW",
]
ignore = [
    # Allow use of assert
    "S101",
    # Do not require docstrings in __init__ and modules
    "D100",
    "D104",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.docformatter]
recursive = true
wrap-summaries=120
wrap-descriptions=120
